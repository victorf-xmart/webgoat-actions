name: Run XGuardian Scanning

on:
  push:
    branches:
      - main

jobs:
  xguardian-scan:
    runs-on: ubuntu-latest

    env:
      API_EMAIL: ${{ secrets.API_EMAIL }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}
      API_TOKEN: ${{ secrets.API_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      APP_NAME: ${{ github.event.repository.name }}
      TEAM_ID: "1"
      SCAN_VERSION: "nome-do-seu-scan"
      FILE_TYPE: "application/zip"
      UPLOAD_URL: "qualquer-url"

    steps:
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Verificar o c√≥digo fonte
        uses: actions/checkout@v4

      - name: Fazer login na API e armazenar o token
        run: |
          echo "Verificando credenciais..."
          if [ -z "$API_EMAIL" ] || [ -z "$API_PASSWORD" ]; then
            echo "‚ùå Erro: API_EMAIL ou API_PASSWORD n√£o est√£o definidos"
            exit 1
          fi
          
          echo "üîÑ Iniciando autentica√ß√£o..."
          full_response=$(curl -v -X 'POST' 'https://auth.xguardianplatform.io/login' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
              "email": "'"${API_EMAIL}"'",
              "password": "'"${API_PASSWORD}"'"
            }' 2>&1)
          
          # Captura o status HTTP
          http_code=$(echo "$full_response" | grep "< HTTP" | awk '{print $3}')
          echo "üìä Status HTTP: $http_code"
          
          # Extrai apenas o token da resposta
          response=$(echo "$full_response" | grep -v "< " | grep -v "> " | jq -r '.token')
          
          # Verifica o resultado da autentica√ß√£o
          if [ "$http_code" != "200" ]; then
            echo "‚ùå Erro na autentica√ß√£o. Resposta completa:"
            echo "$full_response" | grep -v "Authorization:"
            exit 1
          fi
          
          if [ -n "$response" ] && [ "$response" != "null" ]; then
            echo "‚úÖ Autentica√ß√£o bem-sucedida!"
            echo "API_TOKEN=$response" >> $GITHUB_ENV
            echo "‚úÖ Token armazenado com sucesso."
          else
            echo "‚ùå Erro: Token inv√°lido ou vazio na resposta"
            echo "Resposta completa (sem o token):"
            echo "$full_response" | grep -v "Authorization:"
            exit 1
          fi

      - name: Verificar e criar aplica√ß√£o
        run: |
          CREATE_APP_URL="https://uploader-mvp.xguardianplatform.io/create_app"
          DATA='{
            "app_name": "'"${APP_NAME}"'",
            "team_id": ["'"${TEAM_ID}"'"],
            "languages": ["javascript"],
            "description": "Application scanned via GitHub Actions",
            "policy": 0,
            "policy_sast": 0,
            "policy_sca": 0,
            "policy_dast": 0,
            "policy_container": 0,
            "microservices": false,
            "microservices_data": [
              {
                "name": "'"${APP_NAME}"'",
                "language": ["javascript"]
              }
            ]
          }'
          RESPONSE=$(curl -sS -w "%{http_code}" -X POST "${CREATE_APP_URL}" \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -d "${DATA}")
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          # Extrair o c√≥digo de status "400" usando jq
          HTTP_STATUS_400=$(echo "$HTTP_STATUS" | jq '. | select(. == 400)')
          if [ -z "$HTTP_STATUS_400" ]; then
              echo "Erro desconhecido: N√£o foi poss√≠vel obter o c√≥digo de status 400."
          else
              echo "O c√≥digo de status HTTP √© 400 (Bad Request). A aplica√ß√£o j√° existe."
          fi

      - name: Fazer a requisi√ß√£o GET para obter aplica√ß√£o
        run: |  
          RESPONSE=$(curl -sS -X GET \
            'https://uploader-mvp.xguardianplatform.io/get_apps_total' \
            -H 'accept: application/json' \
            -H "Authorization: Bearer ${API_TOKEN}" )
          # Debug: Print the response structure
          echo "Response structure:"
          echo "$RESPONSE" | jq '.'
              
          # Try to parse the response and find the app
          APP_ID=$(echo "$RESPONSE" | jq -r --arg NAME "$APP_NAME" '.apps[] | select(.name == $NAME) | .id')
            
          if [ -z "$APP_ID" ]; then
            echo "Aplica√ß√£o com nome '${APP_NAME}' n√£o encontrada."
            exit 1
          fi
          echo "ID da aplica√ß√£o: $APP_ID"
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV

      - name: Usar o ID da aplica√ß√£o em outro passo
        run: |
          echo "ID da aplica√ß√£o obtido: $APP_ID"
          # Voc√™ pode usar a vari√°vel $APP_ID em outros passos deste trabalho

      - name: Obter URL de upload
        run: |
          UPLOAD_URL=$(curl -sS -X POST 'https://uploader-mvp.xguardianplatform.io/upload-url' \
            -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
                "token": "'"${API_TOKEN}"'",
                "app_id": "'"${APP_ID}"'",
                "scan_version": "'"${SCAN_VERSION}"'",
                "file_type": "'"${FILE_TYPE}"'",
                "sca": "true", 
                "sast": "true" 
              }' | jq -r '.url')
          echo "URL de Upload: ${UPLOAD_URL}"
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV   

      - name: Zip files
        run: |
          zip -r "${APP_NAME}.zip" .
          
      - name: Upload da aplica√ß√£o para o scan
        run: |
          filePath="./${{ env.APP_NAME }}.zip"
  
          curl --progress-bar --location --request PUT "${{ env.UPLOAD_URL }}" \
            --header 'Content-Type: application/zip' \
            --data-binary "@${filePath}"
