name: Run XGuardian Scanning

on:
  push:
    branches:
      - main

jobs:
  xguardian-scan:
    runs-on: ubuntu-latest

    env:
      API_EMAIL: ${{ secrets.API_EMAIL }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}
      API_TOKEN: ${{ secrets.API_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      APP_NAME: ${{ github.event.repository.name }}
      TEAM_ID: "1"
      SCAN_VERSION: "nome-do-seu-scan"
      FILE_TYPE: "application/zip"
      UPLOAD_URL: "qualquer-url"

    steps:
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Verificar o código fonte
        uses: actions/checkout@v4

      - name: Fazer login na API e armazenar o token
        run: |
          # Faz o login na API usando as variáveis de ambiente API_EMAIL e API_PASSWORD
          response=$(curl -X 'POST' 'https://auth.xguardianplatform.io/login' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
              "email": "'"${API_EMAIL}"'",
              "password": "'"${API_PASSWORD}"'"
            }' | jq -r '.token')
            
          # Verifica se o token foi obtido com sucesso
          if [ -n "$response" ] && [ "$response" != "null" ]; then
            # Armazena o token como um segredo no GitHub Actions usando echo e gh
            echo -n "$response" | gh secret set API_TOKEN
            echo "Token armazenado com sucesso."
          else
            echo "Erro: Não foi possível obter o token de autenticação."
            exit 1
          fi

      - name: Verificar e criar aplicação
        run: |
          CREATE_APP_URL="https://uploader-mvp.xguardianplatform.io/create_app"
          DATA='{
            "app_name": "'"${APP_NAME}"'",
            "team_id": ["'"${TEAM_ID}"'"],
            "languages": ["javascript"],
            "description": "Application scanned via GitHub Actions",
            "policy": 0,
            "policy_sast": 0,
            "policy_sca": 0,
            "policy_dast": 0,
            "policy_container": 0,
            "microservices": false
          }'
          RESPONSE=$(curl -sS -X POST "${CREATE_APP_URL}" \
            -H 'accept: application/json' \
            -H "Authorization: Bearer ${API_TOKEN}" \
            -H 'Content-Type: application/json' \
            -d "${DATA}")

          # Tentar extrair app_id do response
          APP_ID=$(echo "$RESPONSE" | jq -r '.app_id')
          
          if [ "$APP_ID" != "null" ] && [ ! -z "$APP_ID" ]; then
            echo "Aplicação criada com sucesso. APP_ID: $APP_ID"
            echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          else
            # Verificar se é erro 400 (app já existe)
            ERROR_STATUS=$(echo "$RESPONSE" | jq -r '.status // empty')
            ERROR_DETAIL=$(echo "$RESPONSE" | jq -r '.detail // empty')
            
            if [[ "$ERROR_STATUS" = "400" ]] || [[ "$ERROR_DETAIL" == *"já existe"* ]]; then
              echo "A aplicação já existe. Buscando o APP_ID existente..."
              # Buscar o APP_ID da aplicação existente
              EXISTING_APP=$(curl -sS -X GET \
                'https://uploader-mvp.xguardianplatform.io/get_apps_total' \
                -H 'accept: application/json' \
                -H "Authorization: Bearer ${API_TOKEN}" )
              
              APP_ID=$(echo "$EXISTING_APP" | jq -r --arg NAME "$APP_NAME" '.[] | select(.name == $NAME) | .id')
              
              if [ -n "$APP_ID" ]; then
                echo "APP_ID encontrado: $APP_ID"
                echo "APP_ID=$APP_ID" >> $GITHUB_ENV
              else
                echo "Aviso: Não foi possível encontrar o APP_ID da aplicação existente"
                echo "Response completo:"
                echo "$EXISTING_APP" | jq '.'
                exit 1
              fi
            else
              echo "Erro inesperado na criação/verificação da aplicação:"
              echo "$RESPONSE"
              exit 1
            fi
          fi

      - name: Fazer a requisição GET para obter aplicação
        run: |  
          RESPONSE=$(curl -sS -X GET \
            'https://uploader-mvp.xguardianplatform.io/get_apps_total' \
            -H 'accept: application/json' \
            -H "Authorization: Bearer ${API_TOKEN}" )
          # Debug: Print the response structure
          echo "Response structure:"
          echo "$RESPONSE" | jq '.'
              
          # Try to parse the response and find the app
          APP_ID=$(echo "$RESPONSE" | jq -r --arg NAME "$APP_NAME" '.apps[] | select(.name == $NAME) | .id')
            
          if [ -z "$APP_ID" ]; then
            echo "Aplicação com nome '${APP_NAME}' não encontrada."
            exit 1
          fi
          echo "ID da aplicação: $APP_ID"
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV

      - name: Usar o ID da aplicação em outro passo
        run: |
          echo "ID da aplicação obtido: $APP_ID"
          # Você pode usar a variável $APP_ID em outros passos deste trabalho

      - name: Obter URL de upload
        run: |
          UPLOAD_URL=$(curl -sS -X POST 'https://uploader-mvp.xguardianplatform.io/upload-url' \
            -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
                "token": "'"${API_TOKEN}"'",
                "app_id": "'"${APP_ID}"'",
                "scan_version": "'"${SCAN_VERSION}"'",
                "file_type": "'"${FILE_TYPE}"'",
                "sca": "true", 
                "sast": "true" 
              }' | jq -r '.url')
          echo "URL de Upload: ${UPLOAD_URL}"
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV   

      - name: Zip files
        run: |
          zip -r "${APP_NAME}.zip" .
          
      - name: Upload da aplicação para o scan
        run: |
          filePath="./${{ env.APP_NAME }}.zip"
  
          curl --progress-bar --location --request PUT "${{ env.UPLOAD_URL }}" \
            --header 'Content-Type: application/zip' \
            --data-binary "@${filePath}"
